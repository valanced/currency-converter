// Code generated by MockGen. DO NOT EDIT.
// Source: ./dependencies.go

// Package converter_test is a generated GoMock package.
package converter_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRater is a mock of Rater interface.
type MockRater struct {
	ctrl     *gomock.Controller
	recorder *MockRaterMockRecorder
}

// MockRaterMockRecorder is the mock recorder for MockRater.
type MockRaterMockRecorder struct {
	mock *MockRater
}

// NewMockRater creates a new mock instance.
func NewMockRater(ctrl *gomock.Controller) *MockRater {
	mock := &MockRater{ctrl: ctrl}
	mock.recorder = &MockRaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRater) EXPECT() *MockRaterMockRecorder {
	return m.recorder
}

// FetchRate mocks base method.
func (m *MockRater) FetchRate(arg0 context.Context, from, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRate", arg0, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRate indicates an expected call of FetchRate.
func (mr *MockRaterMockRecorder) FetchRate(arg0, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRate", reflect.TypeOf((*MockRater)(nil).FetchRate), arg0, from, to)
}
